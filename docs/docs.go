// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/reset": {
            "post": {
                "description": "Reset app and clear all the users (hence messages, etc.)",
                "summary": "Reset app",
                "responses": {
                    "200": {
                        "description": "app successfully resetted!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "error in deleting users",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Login user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User's email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User's password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "401": {
                        "description": "User is unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/messages": {
            "get": {
                "description": "Get all messages (either all of them or from specific author)",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "author_id",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting order ('asc', 'desc' or nothing)",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MessageResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "404": {
                        "description": "Messages not found",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a message for given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Message creation",
                "parameters": [
                    {
                        "description": "Message content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created message information",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "401": {
                        "description": "User is unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/messages/{messageID}": {
            "get": {
                "description": "Get one specific message by it's id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "messageID",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message content",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specific message by it's id",
                "summary": "Delete message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of message that needs to be deleted",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "401": {
                        "description": "User is unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "403": {
                        "description": "User cannot delete this message",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "404": {
                        "description": "Message is not found",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/payment/webhook": {
            "post": {
                "description": "Delete specific message by it's id",
                "summary": "Delete message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of message that needs to be deleted",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Wrong api key",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "description": "Refresh access token with user's refresh token",
                "produces": [
                    "application/json"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token",
                        "schema": {
                            "$ref": "#/definitions/handler.jsonTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "401": {
                        "description": "User is unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/revoke": {
            "post": {
                "description": "Revoke specific refresh token",
                "summary": "Revoke refresh token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "put": {
                "description": "Update specific user's credentials by it's access token",
                "produces": [
                    "application/json"
                ],
                "summary": "Update user's credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User's new email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User's new password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User with updated credentials",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Something is wrong in provided information",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "401": {
                        "description": "User is unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a user with provided email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "User creation",
                "parameters": [
                    {
                        "description": "User's email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User's password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user's information",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "User credentials is incorrect",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.responseError"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Returns an html with visitors counter",
                "produces": [
                    "text/html"
                ],
                "summary": "Fileservers metrics",
                "responses": {
                    "200": {
                        "description": "html page with metrics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns just an \"OK\"",
                "produces": [
                    "text/html"
                ],
                "summary": "Checking server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.jsonTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handler.responseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_premium": {
                    "type": "boolean"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
